<chessboard class="container-content">

    <div class="row">
        <div class="column">
            <h1>How about a nice game of chess?</h1>

            <svg viewBox="0 0 800 800" style="min-width:40rem;max-width:70rem">

                <svg each={ (id, index) in squaresMap } is="square" id={id} index={index} width=100></svg>

            </svg>
        </div>
        <div class="column options" style="width:12rem; text-align: left; margin-top:20rem;">
            <h3> Options:</h3>
            <div>
                <button class="button button-white" onclick={() => flipBoard()}>
                    Flip Board
                </button>
            </div>
            <div>
                <button class="button button-white" onclick={() => toggleLabels()}>
                    {state.showLabels ? 'Hide' : 'Show' } Labels
                </button>
            </div>
            <div>
                <button class="button button-white" onclick={() => togglePieces()}>
                    {state.showPieces ? 'Hide' : 'Show' } Pieces
                </button>
            </div>
        </div>
    </div>

    <script>
        import Square from "../../includes/chessboard/square/square.riot"
        export default {

            components: {
                Square
            },
            flipBoard() {
               this.orientBoard(this.state.orientation === 'white' ? 'black' : 'white');
            },
            toggleLabels() {
                for(let i=0; i<this.squares.length; i++){
                    const square = this.squares[i]
                    square.toggleLabel();
                }
                this.update({
                    showLabels: !this.state.showLabels,
                })
            },
            togglePieces() {
                const showPieces = !this.state.showPieces;

                if(showPieces){

                    // white pawns
                    this.$('#a2').setPiece('pawn', 'white');
                    this.$('#b2').setPiece('pawn', 'white');
                    this.$('#c2').setPiece('pawn', 'white');
                    this.$('#d2').setPiece('pawn', 'white');
                    this.$('#e2').setPiece('pawn', 'white');
                    this.$('#f2').setPiece('pawn', 'white');
                    this.$('#g2').setPiece('pawn', 'white');
                    this.$('#h2').setPiece('pawn', 'white');

                    // white pieces
                    this.$('#a1').setPiece('rook', 'white');
                    this.$('#b1').setPiece('knight', 'white');
                    this.$('#c1').setPiece('bishop', 'white');
                    this.$('#d1').setPiece('queen', 'white');
                    this.$('#e1').setPiece('king', 'white');
                    this.$('#f1').setPiece('bishop', 'white');
                    this.$('#g1').setPiece('knight', 'white');
                    this.$('#h1').setPiece('rook', 'white');

                    // black pawns
                    this.$('#a7').setPiece('pawn', 'black');
                    this.$('#b7').setPiece('pawn', 'black');
                    this.$('#c7').setPiece('pawn', 'black');
                    this.$('#d7').setPiece('pawn', 'black');
                    this.$('#e7').setPiece('pawn', 'black');
                    this.$('#f7').setPiece('pawn', 'black');
                    this.$('#g7').setPiece('pawn', 'black');
                    this.$('#h7').setPiece('pawn', 'black');

                    // black pieces
                    this.$('#a8').setPiece('rook', 'black');
                    this.$('#b8').setPiece('knight', 'black');
                    this.$('#c8').setPiece('bishop', 'black');
                    this.$('#d8').setPiece('queen', 'black');
                    this.$('#e8').setPiece('king', 'black');
                    this.$('#f8').setPiece('bishop', 'black');
                    this.$('#g8').setPiece('knight', 'black');
                    this.$('#h8').setPiece('rook', 'black');


                }else{
                    const clearMap = [
                        'a1','b1','c1','d1','e1','f1','g1','h1', //row 1
                        'a2','b2','c2','d2','e2','f2','g2','h2', //row 2
                        'a7','b7','c7','d7','e7','f7','g7','h7', //row 7
                        'a8','b8','c8','d8','e8','f8','g8','h8', //row 8
                    ]
                    for(let i=0;i<clearMap.length;i++){
                        this.$('#'+clearMap[i]).setPiece(null)
                    }
                }

                this.update({
                    showPieces: showPieces,
                })
            },
            orientBoard(color){
                for(let i=0; i<this.squares.length; i++){
                    const square = this.squares[i]
                    square.setOrientation(color)
                }
                this.update({
                    orientation: color
                })
            },
            onMounted() {
                this.squares = this.root.querySelectorAll('svg.square');
                this.orientBoard('white');
            },
            onBeforeMount() {
                this.state = {
                    orientation: 'white',
                    showLabels: false,
                    showPieces: false,
                }
            },
            squaresMap: [
                'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8',
                'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8',
                'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8',
                'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8',
                'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8',
                'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8',
                'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'g7', 'g8',
                'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8',
            ],
        }
    </script>


    <style>

    </style>

</chessboard>
