<square
        xmlns="http://www.w3.org/2000/svg"
        width={props.width}
        height={props.width}
        x={state.x}
        y={state.y}
        viewBox="0 0 50 50"
        class="square" onclick={() => select(!state.selected)}>

    <rect width="50" height="50" class="{state.color}-square"></rect>
    <rect width="50" height="50" class="square-{state.color}-selected" if={state.selected}></rect>

    <text x="5" y="45" class="square-label stroke-{state.color}" if={state.showLabel}>
        {props.name}
    </text>

    <svg is="piece" piece-name={state.gamePiece}  width="40" x="4" y="5" color={state.gamePieceColor} if={state.gamePiece}></svg>

    <script lang="ts">
        import Piece from "Chessboard/piece/piece.riot"
        import ChessGame from 'ChessGame/ChessGame.ts'

        import {withTypes} from 'riot'
        import {SquareComponent, SquareProps, SquareState} from "Chessboard/square/square.d.ts"

        // noinspection TypeScriptValidateTypes
        export default withTypes<SquareComponent>({
            components: {Piece},
            state: {
                orientation: 'white',
                gamePiece: null,
                gamePieceColor: null,
                showLabel: false,
            },
            onBeforeMount(props: SquareProps, state: SquareState) {
                if(props.index === null || props.name === null){
                    throw new Error("Must set name and index properties")
                }

                const orientation = 'white'
                const coords = this.getXYPosition(props.name, orientation)
                state.x = coords[0]
                state.y = coords[1]
                state.color = ChessGame.getSquareColor(props.name)
                state.selected = props.selected

            },
            onMounted(props: SquareProps) {
                this.root.riot = this
            },
            getXYPosition(name, orientation) {

                const position = ChessGame.getSquarePosition(name, orientation)

                const x = position[0] * 100;
                const y = position[1] * 100;

                return [x, y]
            },
            setOrientation(orientation) {
                const coords = this.getXYPosition(this.props.name, orientation)
                this.update({
                    x: coords[0],
                    y: coords[1],
                })
            },
            setPiece(type=null, color=null) {
                this.update({
                    gamePiece: type,
                    gamePieceColor: color,
                })
            },
            select(isSelected) {
                this.update({selected: isSelected ?? false})
            },
            toggleLabel() {
                this.update({showLabel: !this.state.showLabel})
            },
        })
    </script>

    <style type="sass">



        .square-label
            font-size: 10px

        .square-black-selected
            fill: hotpink
            fill-opacity: 0.65

        .square-white-selected
            fill: hotpink
            fill-opacity: 0.35

    </style>

</square>