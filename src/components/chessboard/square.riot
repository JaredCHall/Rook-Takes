<square
        xmlns="http://www.w3.org/2000/svg"
        width={state.width}
        height={state.width}
        x={state.x}
        y={state.y}
        viewBox="0 0 50 50"
        class="square square-{props.name}" onclick={() => select(!state.selected)}>

    <rect width="50" height="50" class="{state.color}-square"></rect>
    <rect width="50" height="50" class="square-{state.color}-selected" if={state.selected}></rect>

    <text x="5" y="45" class="square-label stroke-{state.color}" if={state.showLabel}>
        {props.name}
    </text>

    <svg is="piece" piece-name={state.gamePiece}  width="40" x="4" y="5" color={state.gamePieceColor} if={state.gamePiece}></svg>

    <script>
        import Piece from "./piece"
        import ChessGamePosition from "ChessGamePosition";
        export default {
            components: {Piece},
            onBeforeMount(props) {
                if(props.index === undefined || props.name === undefined){
                    throw new Error("Must set id and index properties")
                }

                const orientation = 'white'
                const coords = this.getXYPosition(props.index, orientation);
                this.state = {
                    orientation: orientation,
                    x: coords[0],
                    y: coords[1],
                    color: ChessGamePosition.squareColors[props.index] === 1 ? 'black' : 'white',
                    gamePiece: null,
                    gamePieceColor: null,
                    selected: false,
                }
            },
            onMounted(props) {
                this.update(props)
                this.root.toggleLabel = this.toggleLabel;
                this.root.setOrientation = this.setOrientation;
                this.root.setPiece = this.setPiece;
                this.root.getName = this.getName;
                this.root.select = this.select;
            },
            toggleLabel() {
                this.update({showLabel: !this.state.showLabel})
            },
            setPiece(type=null,color=null) {
                this.update({
                    gamePiece: type,
                    gamePieceColor: color,
                })
            },
            select(isSelected) {
              this.update({selected: isSelected ?? false})
            },

            setOrientation(orientation) {
                const coords = this.getXYPosition(this.props.index, orientation);
                this.update({
                    x: coords[0],
                    y: coords[1],
                })
            },
            getName() {
              return this.name
            },

            getXYPosition(index, orientation) {
                let y = Math.floor(index / 8) * -1 + 8
                let x = index % 8 + 1

                if(orientation === 'black'){
                    x = x * -1 + 9
                    y = y * -1 + 9
                }

                x = (x - 1) * 100;
                y = (8 - y) * 100;

                return [x, y]
            },
        }
    </script>

    <style type="sass">
.black-square
    fill: #315F65FF

.white-square
    fill: #FFEED1FF

.square-label
    font-size: 10px

.stroke-white
    stroke: #315F65FF

.stroke-black
    stroke: #FFEED1FF

.square-black-selected
    fill: hotpink
    fill-opacity: 0.65

.square-white-selected
    fill: hotpink
    fill-opacity: 0.35

    </style>

</square>