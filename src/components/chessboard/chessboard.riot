<chessboard class="container-content">

    <h1 if={state.title}>{state.title}</h1>
    <div class="row">

        <div class="column">
            <svg viewBox="0 0 800 800" style="min-width:60rem;max-width:90rem;width: auto">
                <svg
                    each={ (name, index) in getSquareNames() }
                    is="square" name={name}
                    index={index}
                    selected={state.selectedSquare === name}
                    width=100
                    board={this}
                    ></svg>
            </svg>
        </div>


        <div class="column options" style="width:20rem; text-align: left;" if={state.showOptions}>
            <board-options board={this}></board-options>
        </div>
    </div>

    <script lang="ts">
        import Square from "./square/square.riot"
        import BoardOptions from "./board-options/board-options.riot"
        import ChessGame from 'ChessGame/ChessGame.ts'

        import {withTypes} from 'riot'
        import {ChessboardComponent, ChessboardProps, ChessboardState} from "Chessboard/chessboard.d.ts"


        // noinspection TypeScriptValidateTypes
        export default withTypes<ChessboardComponent>({
            gamePosition: null,
            squares: [],
            components: {Square, BoardOptions},
            state: {
              orientation: 'white',
              showLabels: false,
              showPieces: false,
            },
            onBeforeMount(props: ChessboardProps, state: ChessboardState) {
                this.gamePosition = new ChessGame('8/8/8/8/8/8/8/8 w KQkq -')

                state.title = props.title
                state.showOptions = props.showOptions
                state.selectedSquare = props.selectedSquare
            },
            onMounted() {

                const squareElements = this.root.querySelectorAll('svg.square')
                this.squares = [];
                for(let i = 0; i < squareElements.length; i++){
                    const el = squareElements[i]
                    this.squares.push(el.riot)
                }
                this.setPosition(this.gamePosition.fen)
            },
            getSquareNames() {
                return ChessGame.allSquareNames();
            },
            getSquare(key): Element {
                if(typeof key === 'string'){
                    return this.squares[ChessGame.getSquareIndex(key)]
                }

                return this.squares[key];
            },
            orientBoard(color){
                for(let i=0; i<this.squares.length; i++){
                    const square = this.squares[i]
                    square.setOrientation(color)
                }
                this.update({
                    orientation: color
                })
            },
            getFen() {
                return this.gamePosition.fen
            },
            getPosition(): ChessGame {
               return this.gamePosition
            },
            setPosition(fen) {
                this.gamePosition.setPosition(fen)
                const positions = this.getPosition().positions

                for(const squareName in positions){
                    const piece = positions[squareName]
                    this.getSquare(squareName).setPiece(piece)
                }
            },
            showMoveIndicators(squares: Array<string>) {
                this.clearMoveIndicators()

                for(let i = 0; i<squares.length; i++){
                    this.getSquare(squares[i]).showMoveIndicator(true)
                }
            },
            clearSelections() {
                for(let i = 0; i<this.squares.length; i++){
                    this.squares[i].showSelected(false)
                }
            },
            clearMoveIndicators() {
                for(let i = 0; i<this.squares.length; i++){
                    this.squares[i].showMoveIndicator(false)
                }
            },
            togglePieces() {
                const showPieces = !this.state.showPieces
                if(showPieces){
                    this.setPosition('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1')
                }else{
                    this.setPosition('8/8/8/8/8/8/8/8 w KQkq -')
                }
                this.update({
                    showPieces: showPieces,
                })
            },
            toggleLabels() {
                for(let i=0; i<this.squares.length; i++){
                    const square = this.squares[i]
                    square.toggleLabel()
                }
                this.update({
                    showLabels: !this.state.showLabels,
                })
            },
            flipBoard() {
                this.orientBoard(this.state.orientation === 'white' ? 'black' : 'white')
            },
        })
    </script>

</chessboard>
