<chessboard class="container-content">

    <h1 if={state.title}>{state.title}</h1>
    <div class="row">

        <div class="column">
            <svg viewBox="0 0 800 800" style="min-width:20rem;max-width:70rem">
                <svg
                    each={ (name, index) in getSquareNames() }
                    is="square" name={name}
                    index={index}
                    selected={state.selectedSquare === name}
                    width=100
                    ></svg>
            </svg>
        </div>


        <div class="column options" style="width:40rem; text-align: left;" if={state.showOptions}>
            <board-options board={this}></board-options>
        </div>
    </div>

    <script lang="ts">
        import Square from "./square"
        import ChessGamePosition from "ChessGamePosition"
        import BoardOptions from "./board-options"

        import {withTypes} from 'riot'
        import {ChessboardComponent, ChessboardProps, ChessboardState} from "Chessboard/chessboard.d"


        // noinspection TypeScriptValidateTypes
        export default withTypes<ChessboardComponent>({
            gamePosition: null,
            squares: null,
            components: {Square, BoardOptions},
            state: {
              orientation: 'white',
              showLabels: false,
              showPieces: false,
            },
            onBeforeMount(props: ChessboardProps, state: ChessboardState) {
                this.gamePosition = new ChessGamePosition('8/8/8/8/8/8/8/8 w KQkq -')
                state.title = props.title;
                state.showOptions = props.showOptions;
                state.selectedSquare = props.selectedSquare;
            },
            onMounted() {
                this.squares = this.root.querySelectorAll('svg.square');
                this.setPosition(this.gamePosition.fen)
            },
            getSquareNames() {
                return ChessGamePosition.squareNames;
            },
            getSquare(key): Element {
                if(typeof key === 'string'){
                    return this.squares[this.getSquareNames().indexOf(key)];
                }

                return this.squares[key];
            },
            orientBoard(color){
                for(let i=0; i<this.squares.length; i++){
                    const square = this.squares[i]
                    square.riot.setOrientation(color)
                }
                this.update({
                    orientation: color
                })
            },
            getFen() {
                return this.gamePosition.fen;
            },
            getPosition(): ChessGamePosition {
               return this.gamePosition;
            },
            setPosition(fen) {
                this.gamePosition.setPosition(fen)
                const positions = this.getPosition().positions;
                for(const squareName in positions){
                    const position = positions[squareName];
                    const square = this.getSquare(squareName);
                    if(position === null){
                        square.riot.setPiece(null)
                    }else{
                        square.riot.setPiece(position[0],position[1])
                    }
                }
            },
            togglePieces() {
                const showPieces = !this.state.showPieces;
                if(showPieces){
                    this.setPosition('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1')
                }else{
                    this.setPosition('8/8/8/8/8/8/8/8 w KQkq -')
                }
                this.update({
                    showPieces: showPieces,
                })
            },
            toggleLabels() {
                for(let i=0; i<this.squares.length; i++){
                    const square = this.squares[i]
                    square.riot.toggleLabel();
                }
                this.update({
                    showLabels: !this.state.showLabels,
                })
            },
            flipBoard() {
                this.orientBoard(this.state.orientation === 'white' ? 'black' : 'white');
            },
        })
    </script>


    <style>

    </style>

</chessboard>
